{"version":3,"file":"static/js/151.09bbed26.chunk.js","mappings":"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","sources":["Pages/List.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport './List.css';\r\n\r\nconst List = () => {\r\n    const navigate = useNavigate();\r\n    const { id } = useParams();\r\n\r\n    const [navingBack, setNavingBack] = useState(false);\r\n    const [listName, setListName] = useState('');\r\n    const [categories, setCategories] = useState([]);\r\n    const [crossedOff, setCrossedOff] = useState([]);\r\n    const [showAddCategory, setShowAddCategory] = useState(false);\r\n    const [newCategory, setNewCategory] = useState('');\r\n    const [refreshingPage, setRefreshingPage] = useState(false);\r\n    const [refreshCount, setRefreshCount] = useState(0);\r\n\r\n    useEffect(() => {\r\n        // Make a get request to https://our-lists.glitch.me/list/:id with the id of the list\r\n        // Then set the list state to the data returned from the request\r\n        fetch(`https://our-lists.glitch.me/list/${id}`)\r\n        .then(res => res.json())\r\n        .then(data => {\r\n            setListName(data.list.name);\r\n            // Add a newItem field to each category\r\n            data.list.categories.forEach(category => {\r\n                category.newItem = '';\r\n                category.movingDown = false;\r\n                category.movingUp = false;\r\n            });\r\n\r\n            data.list.categories.forEach(category => {\r\n                category.activeEdit = false;\r\n                category.items.forEach(item => {\r\n                    item.activeEdit = false;\r\n                });\r\n            });\r\n            \r\n            setCategories(data.list.categories);\r\n            setCrossedOff(data.list.crossedOff);\r\n        });\r\n    }, [refreshCount]);\r\n\r\n    const navBack = () => {\r\n        setNavingBack(true);\r\n        setTimeout(() => {\r\n            setNavingBack(false);\r\n            navigate('/myLists');\r\n        }, 1000);\r\n    }\r\n\r\n    const moveUp = (index) => {\r\n        const newCategories = [...categories];\r\n        const temp = newCategories[index];\r\n        newCategories[index] = newCategories[index - 1];\r\n        newCategories[index - 1] = temp;\r\n        newCategories[index - 1].movingUp = false;\r\n        newCategories[index].movingDown = false;\r\n        setCategories(newCategories);\r\n\r\n        fetch('https://our-lists.glitch.me/list/moveUp', {\r\n            method: 'POST',\r\n            body: JSON.stringify({code: id, index}),\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    const moveDown = (index) => {\r\n        const newCategories = [...categories];\r\n        const temp = newCategories[index];\r\n        newCategories[index] = newCategories[index + 1];\r\n        newCategories[index + 1] = temp;\r\n        newCategories[index + 1].movingDown = false;\r\n        newCategories[index].movingUp = false;\r\n        setCategories(newCategories);\r\n\r\n        fetch('https://our-lists.glitch.me/list/moveDown', {\r\n            method: 'POST',\r\n            body: JSON.stringify({code: id, index}),\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    const deleteCategory = (categoryName) => {\r\n        const newCategories = categories.filter(category => category.name !== categoryName);\r\n        setCategories(newCategories);\r\n\r\n        fetch('https://our-lists.glitch.me/list/category', {\r\n            method: 'DELETE',\r\n            body: JSON.stringify({code: id, categoryName}),\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            }\r\n        });\r\n    }\r\n\r\n    const changeQnt = (categoryIndex, itemIndex, quantity) => {\r\n        fetch('https://our-lists.glitch.me/list/changeQnt', {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                code: id, \r\n                quantity,\r\n                categoryIndex,\r\n                itemIndex\r\n            }),\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            }\r\n        });\r\n\r\n        const newCategories = [...categories];\r\n        newCategories[categoryIndex].items[itemIndex].quantity = quantity;\r\n        setCategories(newCategories);\r\n    }\r\n\r\n    return (\r\n        <div id=\"content\">\r\n            <div id=\"header\">\r\n                <img id=\"back\" src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/back.png?v=1703820361532\" alt=\"back\" onClick={navBack} style={navingBack ? {animation: 'button-press .75s'} : null} />\r\n                <p>{listName}</p> \r\n                <img id=\"refresh\" src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/refresh.png?v=1703820199335\" alt=\"refresh\" style={refreshingPage ? {\r\n                    // Rotate the image 360 degrees using transform\r\n                    transform: 'rotate(360deg)',\r\n                    transitionDuration: '.5s'\r\n                } : null} onClick={() => { \r\n                    setRefreshingPage(true);\r\n\r\n                    setTimeout(() => {\r\n                        setRefreshingPage(false);\r\n                        setRefreshCount(refreshCount + 1);\r\n                    }, 500);\r\n                }} />\r\n                <div id=\"code\">Code: {id}</div>\r\n                <div id=\"add-category\" onClick={() => { setShowAddCategory(true) }}>+</div>\r\n            </div>\r\n            {\r\n                categories.map((category, categoryIndex) => {\r\n                    return (\r\n                        <div key={categoryIndex} className=\"category\" id={category.name} style={category.movingDown ? {\r\n                            // Use the document to get the sibling category to know how far to move the category down\r\n                            transform: `translateY(${document.getElementById(categories[categoryIndex + 1].name).clientHeight + 50}px)`,\r\n                            transitionDuration: '.5s'\r\n                        } : category.movingUp ? {\r\n                            // Use the document to get the sibling category to know how far to move the category up\r\n                            transform: `translateY(-${document.getElementById(categories[categoryIndex - 1].name).clientHeight + 50}px)`,\r\n                            transitionDuration: '.5s'\r\n                        } : null}>\r\n                            <div className='category-header'>\r\n                                <div className=\"move-down\" onClick={() => { \r\n                                    if(categoryIndex === categories.length - 1) return;\r\n                                    let temp = [...categories];\r\n                                    temp[categoryIndex].movingDown = true;\r\n                                    temp[categoryIndex + 1].movingUp = true;\r\n                                    setCategories(temp);\r\n\r\n                                    setTimeout(() => {\r\n                                        moveDown(categoryIndex, category.name); \r\n                                    }, 500);\r\n                                }}>▼</div>\r\n                                <div className=\"move-up\" onClick={() => { \r\n                                    if(categoryIndex === 0) return;\r\n                                    let temp = [...categories];\r\n                                    temp[categoryIndex].movingUp = true;\r\n                                    temp[categoryIndex - 1].movingDown = true;\r\n                                    setCategories(temp);\r\n\r\n                                    setTimeout(() => {\r\n                                        moveUp(categoryIndex, category.name); \r\n                                    }, 500);\r\n                                }}>▲</div>\r\n                                {\r\n                                    // If activeEdit is true, show the input, otherwise show the p tag\r\n                                    category.activeEdit ? (\r\n                                        <input type=\"text\" className=\"category-update-input\" \r\n                                            onChange={(event) => {\r\n                                                const newCategories = [...categories];\r\n                                                newCategories[categoryIndex].name = event.target.value;\r\n                                                setCategories(newCategories);\r\n                                            }} \r\n                                            value={category.name} \r\n                                            onBlur={() => {\r\n                                                // Make a post request to https://our-lists.glitch.me/list/changeCategory with the id of the list, the category name, and the new category name\r\n                                                fetch('https://our-lists.glitch.me/list/changeCategoryName', {\r\n                                                    method: 'POST',\r\n                                                    body: JSON.stringify({\r\n                                                        code: id,\r\n                                                        name: category.name,\r\n                                                        index: categoryIndex\r\n                                                    }),\r\n                                                    headers: {\r\n                                                    'Content-Type': 'application/json'\r\n                                                    }\r\n                                                });\r\n\r\n                                                const newCategories = [...categories];\r\n                                                newCategories[categoryIndex].activeEdit = false;\r\n                                                setCategories(newCategories);\r\n                                            }} \r\n                                        />\r\n                                    ) : (\r\n                                        <p className='category-title' onClick={() => {\r\n                                            const newCategories = [...categories];\r\n                                            newCategories[categoryIndex].activeEdit = true;\r\n                                            setCategories(newCategories);\r\n\r\n                                            // Focus on the input\r\n                                            setTimeout(() => {\r\n                                                // First find the category element by its index then find the input element by its index\r\n                                                document.getElementsByClassName('category')[categoryIndex].getElementsByClassName('category-update-input')[0].focus();\r\n                                            }, 0);\r\n                                        }}>{category.name}</p>\r\n                                    )\r\n                                }\r\n                                <img className=\"delete-category\" src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/delete.png?v=1703725625808\" alt=\"delete\" onClick={() => { deleteCategory(category.name); }} />\r\n                                <div className=\"add-item\">\r\n                                    <input type=\"text\" placeholder=\"Item Description\" className=\"add-item-input\" onChange={(event) => {\r\n                                        const newCategories = [...categories];\r\n                                        newCategories[categoryIndex].newItem = event.target.value;\r\n                                        setCategories(newCategories);\r\n                                    }} value={category.newItem}/>\r\n                                    <img src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/plus-green.png?v=1703819381081\" className=\"add-item-plus\" onClick={() => {\r\n                                        // If the input is empty, don't add the item\r\n                                        if(category.newItem === '') return;\r\n\r\n                                        // Make a post request to https://our-lists.glitch.me/list/addItem with the id of the list, the category name, and the item name\r\n                                        fetch('https://our-lists.glitch.me/list/addItem', {\r\n                                            method: 'POST',\r\n                                            body: JSON.stringify({code: id, category: category.name, item: category.newItem, qnt: 1}),\r\n                                            headers: {\r\n                                            'Content-Type': 'application/json'\r\n                                            }\r\n                                        });\r\n\r\n                                        // Add the item to the category\r\n                                        const newCategories = [...categories];\r\n                                        newCategories[categoryIndex].items.push({name: category.newItem, quantity: 1, category: category.name});\r\n                                        newCategories[categoryIndex].newItem = '';\r\n                                        setCategories(newCategories);\r\n                                    }}/>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"items\">\r\n                                {\r\n                                    category.items.map((item, itemIndex) => {\r\n                                        return (\r\n                                            <div key={itemIndex} className=\"item\">\r\n                                                {\r\n                                                    // If activeEdit is true, show the input, otherwise show the p tag\r\n                                                    item.activeEdit ? (\r\n                                                        <input type=\"text\" className=\"item-update-input\" onChange={(event) => {\r\n                                                            const newCategories = [...categories];\r\n                                                            newCategories[categoryIndex].items[itemIndex].name = event.target.value;\r\n                                                            setCategories(newCategories);\r\n                                                        }} value={item.name} onBlur={() => {\r\n                                                            // Make a post request to https://our-lists.glitch.me/list/changeItem with the id of the list, the category name, the item name, and the new item name\r\n                                                            fetch('https://our-lists.glitch.me/list/changeItemName', {\r\n                                                                method: 'POST',\r\n                                                                body: JSON.stringify({\r\n                                                                    code: id,\r\n                                                                    name: item.name,\r\n                                                                    categoryIndex,\r\n                                                                    itemIndex\r\n                                                                }),\r\n                                                                headers: {\r\n                                                                'Content-Type': 'application/json'\r\n                                                                }\r\n                                                            });\r\n\r\n                                                            const newCategories = [...categories];\r\n                                                            newCategories[categoryIndex].items[itemIndex].activeEdit = false;\r\n                                                            setCategories(newCategories);\r\n                                                        }} />\r\n                                                    ) : (\r\n                                                        <p className=\"item-name\" onClick={() => {\r\n                                                            const newCategories = [...categories];\r\n                                                            newCategories[categoryIndex].items[itemIndex].activeEdit = true;\r\n                                                            setCategories(newCategories);\r\n\r\n                                                            // Focus on the input\r\n                                                            setTimeout(() => {\r\n                                                                // First find the category element by its index then find the input element by its index\r\n                                                                document.getElementsByClassName('category')[categoryIndex].getElementsByClassName('item')[itemIndex].getElementsByClassName('item-update-input')[0].focus();\r\n                                                            }, 0);\r\n                                                        }}>{item.name}</p>\r\n                                                    )\r\n\r\n                                                }\r\n                                                <img src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/minus-beige.png?v=1703820118196\" className=\"item-qnt-down\" \r\n                                                    onClick={() => {\r\n                                                        // If the quantity is 1, don't decrease the quantity\r\n                                                        if(parseInt(item.quantity) === 1) return;\r\n\r\n                                                        changeQnt(categoryIndex, itemIndex, parseInt(item.quantity) - 1);\r\n                                                    }\r\n                                                }\r\n                                                />\r\n                                                <p className='item-qnt'>{item.quantity}</p>\r\n                                                <img src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/plus-beige.png?v=1703819641865\" className=\"item-qnt-up\" \r\n                                                    onClick={() => {\r\n                                                        changeQnt(categoryIndex, itemIndex, parseInt(item.quantity) + 1);\r\n                                                    }\r\n                                                }\r\n                                                />\r\n                                                <img src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/delete.png?v=1703726678591\" className=\"item-delete\" onClick={() => {\r\n                                                    // Add item to crossed off, and remove from category\r\n                                                    const newCategories = [...categories];\r\n                                                    const newCrossedOff = [...crossedOff];\r\n                                                    newCategories[categoryIndex].items[itemIndex].category = category.name;\r\n                                                    newCrossedOff.push(newCategories[categoryIndex].items[itemIndex]);\r\n                                                    newCategories[categoryIndex].items.splice(itemIndex, 1);\r\n                                                    setCategories(newCategories);\r\n                                                    setCrossedOff(newCrossedOff);\r\n\r\n                                                    fetch('https://our-lists.glitch.me/list/crossOff', {\r\n                                                        method: 'POST',\r\n                                                        body: JSON.stringify({\r\n                                                            code: id, \r\n                                                            category: category.name, \r\n                                                            name: item.name,\r\n                                                            quantity: item.quantity,\r\n                                                            categoryIndex,\r\n                                                            itemIndex\r\n                                                        }),\r\n                                                        headers: {\r\n                                                        'Content-Type': 'application/json'\r\n                                                        }\r\n                                                    });\r\n                                                }} />\r\n\r\n                                            </div>\r\n                                        );\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            <div id=\"crossed-off-title\">Crossed Off</div>\r\n            {\r\n                (crossedOff) && crossedOff.map((item, index) => {\r\n                    return (\r\n                        <div key={index} className='crossed-off-item'>\r\n                            <p className='crossed-off-item-desc' onClick={() => {\r\n                                // Add item to category, and remove from crossed off\r\n                                const newCategories = [...categories];\r\n                                const newCrossedOff = [...crossedOff];\r\n                                console.log(item);\r\n                                const categoryIndex = newCategories.findIndex(category => category.name === item.category);\r\n                                console.log(categoryIndex);\r\n                                console.log(newCategories[categoryIndex]);\r\n                                newCategories[categoryIndex].items.push(newCrossedOff[index]);\r\n                                newCrossedOff.splice(index, 1);\r\n                                setCategories(newCategories);\r\n                                setCrossedOff(newCrossedOff);\r\n\r\n                                fetch('https://our-lists.glitch.me/list/uncrossOff', {\r\n                                    method: 'POST',\r\n                                    body: JSON.stringify({\r\n                                        code: id,\r\n                                        name: item.name,\r\n                                        quantity: item.quantity,\r\n                                        category: item.category,\r\n                                        itemIndex: index\r\n                                    }),\r\n                                    headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                    }\r\n                                });\r\n                            }}>{item.quantity} - {item.name}</p>\r\n                            <img src=\"https://cdn.glitch.global/a505ce02-f570-40df-ad76-697af5e6acd7/permDelete.png?v=1703740581264\" className=\"crossed-off-item-delete\" \r\n                                onClick={() => {\r\n                                    // Remove item from crossed off\r\n                                    const newCrossedOff = [...crossedOff];\r\n                                    newCrossedOff.splice(index, 1);\r\n                                    setCrossedOff(newCrossedOff);\r\n\r\n                                    fetch('https://our-lists.glitch.me/list/item', {\r\n                                        method: 'DELETE',\r\n                                        body: JSON.stringify({\r\n                                            code: id,\r\n                                            itemIndex: index\r\n                                        }),\r\n                                        headers: {\r\n                                        'Content-Type': 'application/json'\r\n                                        }\r\n                                    });\r\n                                }\r\n                            }\r\n                            />\r\n                        </div>\r\n                    );\r\n                })\r\n            }\r\n            <div className='footer' />\r\n            {\r\n                showAddCategory ? (\r\n                    <React.Fragment>\r\n                        <div id=\"add-category-overlay\" onClick={() => { \r\n                            setShowAddCategory(false);\r\n                            setNewCategory('');\r\n                        }}></div>\r\n                        <div id='add-category-modal'>\r\n                            <input id=\"add-category-input\" type=\"text\" placeholder=\"Category Name\" onChange={(event) => {\r\n                                setNewCategory(event.target.value);\r\n                            }} value={newCategory} />\r\n                            <button id=\"add-category-btn\" onClick={() => {\r\n                                if(newCategory === '') return;\r\n\r\n                                const category = {\r\n                                    name: newCategory,\r\n                                    items: []\r\n                                };\r\n\r\n                                // Add category to the front of the categories array\r\n                                setCategories([category, ...categories]);\r\n\r\n                                // Make a post request to https://our-lists.glitch.me/list/addCategory with the id of the list and the new category\r\n                                fetch('https://our-lists.glitch.me/list/addCategory', {\r\n                                    method: 'POST',\r\n                                    body: JSON.stringify({code: id, categoryName: newCategory}),\r\n                                    headers: {\r\n                                    'Content-Type': 'application/json'\r\n                                    }\r\n                                });\r\n                                setShowAddCategory(false);\r\n                                setNewCategory('');\r\n                            }}>Add</button>\r\n                        </div>\r\n                    </React.Fragment>\r\n                ) : null\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default List;"],"names":["List","navigate","useNavigate","id","useParams","navingBack","setNavingBack","useState","listName","setListName","categories","setCategories","crossedOff","setCrossedOff","showAddCategory","setShowAddCategory","newCategory","setNewCategory","refreshingPage","setRefreshingPage","refreshCount","setRefreshCount","useEffect","fetch","concat","then","res","json","data","list","name","forEach","category","newItem","movingDown","movingUp","activeEdit","items","item","changeQnt","categoryIndex","itemIndex","quantity","method","body","JSON","stringify","code","headers","newCategories","_jsxs","children","_jsx","src","alt","onClick","navBack","setTimeout","style","animation","transform","transitionDuration","map","className","document","getElementById","clientHeight","length","temp","index","moveDown","moveUp","type","onChange","event","target","value","onBlur","getElementsByClassName","focus","categoryName","filter","deleteCategory","placeholder","qnt","push","parseInt","newCrossedOff","splice","console","log","findIndex","React"],"sourceRoot":""}